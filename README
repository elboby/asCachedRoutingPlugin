asCachedRoutingPlugin
---

Introduction
---
This plugin permits to generate a routing file for webserver like Apache/NGINX based on the symfony routing file.
This will remove the routing processing away from the php scripts and hopefully improve performance.
It also allows to have a specific entry script for each route which makes things easier to debug.
The routing is still needed to generate internal urls.


How to use
---
* Install the plugin in the plugins folder.
* Configure the plugin via app.yml (an example can be found in plugins/asCachedRoutingPlugin/config/app.yml).
* Clear the cache.
* Launch the pake task to generate the routing files: ./symfony routing:generate-cache nginx
* Setup your webserver to accept the generated file.

Options
---
By default the controller is created for the frontend application and the dev environment.
To change the frontend, specify it to the pake command: --application=backend
To change the frontend, specify it to the pake command: --env=dev
To enable debug output: --debug=true

Configuration
---
There are comments in the example in plugins/asCachedRoutingPlugin/config/app.yml.
The classes for the controller and webserver configuration can be changed easily to add more functionality.
The templates for the controller file and webserver configuration file can also be easily changed; make sure to respect the placeholders.

Apache setup
---
As the htaccess file at the root of the web folder is already read by Apache. There is nothing to change.
Specific rules in .htaccess file needs to be specify in the template though. You can specify a new template file location in the configuration.
This was not heavily tested, production/development is now only done in Nginx.

Nginx setup
---
Nginx doesn't dynamically look for configuration file; it has to be specified in its own vhosts configuration.
Edit your nginx file and add the include of the file generated:
Specific rules in .htaccess file needs to be specify in the template though. You can specify a new template file location in the configuration.
An example of config file:
http {
  include    /etc/nginx/fastcgi_params;
  
  server {
    listen       80;
    server_name  localhost;
    root /vagrant/code/web;
    index  index.php;

    charset utf-8;

    location /sf {
          #path to folder where all symfony assets are located
          alias /vagrant/code/lib/vendor/symfony-1.2.12/data/web/sf;
        }

    location / {
      # If the file exists as a static file serve it directly without
      # running all the other rewite tests on it
      if (-f $request_filename) {
        expires max; 
        break; 
      }
      
      # include the routing file generated by symfony
      include /vagrant/code/web/.nginx.conf;
    }

    location ~ \.php($|/) {
      set  $script     $uri;
      set  $path_info  "";

      if ($uri ~ "^(.+\.php)(/.+)") {
        set  $script     $1;
        set  $path_info  $2;
      }

      fastcgi_pass   127.0.0.1:9000;
      include /etc/nginx/fastcgi_params;
      fastcgi_param  SCRIPT_FILENAME  /vagrant/code/web$script;
      fastcgi_param  PATH_INFO        $path_info;
    }
  }
}

Nginx_group setup
---
This configuration allows to have rule sets group by some location (like the first items in the url).
It avoids having a big list of rules, which could affect performance of nginx.
Basically you will have for example:
location /module1{
  rewrite ^/module1/index$ /_cache_routing/frontend/module1index.php last;
  rewrite ^/module1/foo$ /_cache_routing/frontend/module1foo.php last;
}
The main nginx configuration has to be changed compared to the previous one.

Test
---